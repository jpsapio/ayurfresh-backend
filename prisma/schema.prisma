generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int               @id @default(autoincrement())
  name         String
  email        String            @unique @db.VarChar(191)
  password     String
  phone_number String?           @unique @db.VarChar(15)
  role         Role              @default(USER)
  created_at   DateTime          @default(now())
  updated_at   DateTime          @updatedAt

  verification UserVerification?
  preference   UserPreference?
  addresses    Address[]
  products     Product[]
  orders       Order[]

  // Ignored fields (computed)
  email_verified Boolean? @ignore
  phone_verified Boolean? @ignore
}

model UserVerification {
  id                   Int                @id @default(autoincrement())
  user                 User               @relation(fields: [user_id], references: [id])
  user_id              Int                @unique
  email_status         VerificationStatus @default(PENDING)
  email_verify_token   String?            @unique
  email_verified_at    DateTime?
  phone_status         VerificationStatus @default(PENDING)
  phone_otp            String?
  otp_expiry           DateTime?
  phone_verified_at    DateTime?
  password_reset_token String?            @unique
  reset_token_expiry   DateTime?
}

model UserPreference {
  id                     Int     @id @default(autoincrement())
  user                   User    @relation(fields: [user_id], references: [id])
  user_id                Int     @unique
  notify_product_updates Boolean @default(false)
}

model Address {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [user_id], references: [id])
  user_id      Int
  name         String
  phone        String      @db.VarChar(15)
  house_no     String
  street       String
  landmark     String?
  city         String
  state        String
  country      String      @default("India")
  pincode      String      @db.VarChar(6)
  address_type AddressType @default(HOME)
  is_primary   Boolean     @default(false)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt

  @@index([user_id])
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  slug          String         @unique
  description   String?        @db.VarChar(1000)
  price         Float
  offer_type    OfferType?
  offer_value   Float?
  offered_price Float?
  images        ProductImage[]
  contents      Json?
  deal_types    DealType[]
  category      Category       @relation(fields: [category_id], references: [id])
  category_id   Int
  created_by    User           @relation(fields: [user_id], references: [id])
  user_id       Int
  order_items   OrderItem[]
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
}

model ProductImage {
  id         Int     @id @default(autoincrement())
  url        String
  is_primary Boolean @default(false)
  product    Product @relation(fields: [product_id], references: [id])
  product_id Int
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  description String?
  products    Product[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model Order {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [user_id], references: [id])
  user_id    Int
  items      OrderItem[]
  status     OrderStatus @default(PENDING)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  product    Product @relation(fields: [product_id], references: [id])
  product_id Int
  quantity   Int
  price      Float
  order      Order   @relation(fields: [order_id], references: [id])
  order_id   Int
}

enum AddressType {
  HOME
  WORK
  OTHER
}

enum Role {
  USER
  ADMIN
}

enum VerificationStatus {
  PENDING
  VERIFIED
}

enum OfferType {
  PERCENTAGE
  FIXED
}

enum DealType {
  TRENDING
  HOT
  MOST_PREFERRED
  NEW_ARRIVAL
  BEST_SELLER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
